import numpy as np
import pandas as pd
import pickle
import os
import matplotlib.pyplot as plt
import seaborn as sns

# load data
betas = pd.read_csv(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../outputs/participants_max_betas.csv'))

# Update task and fsm_type columns
betas['task'] = betas['task'].str.capitalize().astype('category').cat.reorder_categories(['Control', 'Prediction', 'Explanation'])
betas['fsm_type'] = betas['fsm_type'].str.capitalize().replace({'Easy': 'Easy FSM', 'Hard': 'Hard FSM'})

# Update feedback_condition column
feedback_map = {
    'control': 'Trained on control',
    'prediction': 'Trained on prediction',
    'explanation': 'Trained on explanation'
}
betas['feedback_condition'].replace(feedback_map, inplace=True)

# Update trial_type column
trial_map = {
    'visible': 'Visible',
    'hidden': 'Hidden\nNormative',
    'hidden_an': 'Hidden\nAN'
}
betas['trial_type'].replace(trial_map, inplace=True)

# plot settings 
x = 'trial_type'
y = 'max_beta'
hue = 'task'
col = 'feedback_condition'

hue_palette = ['darkorange', 'indigo', 'steelblue']
markers = ['o', 's', '^']


# Styling
sns.set_style("white")
sns.set_context("paper", font_scale=1.8)

# Plot
g = sns.catplot(x=x, y=y, hue=hue, col=col, data=betas, kind="point", dodge=0.25, join=True, ci=95, palette=hue_palette, height=4.5, aspect=1, legend=False, markers=markers, linestyles=['dotted', 'dotted', 'dotted'])

# Remove autogenerated subplot titles
for ax in g.axes.flat:
    ax.set_title("")

# Add legend at the top with 3 columns
g.add_legend(title='', loc='upper center', bbox_to_anchor=(0.4, 1.09), ncol=3)

# axes labels
g.set_ylabels('Beta')
g.set_xlabels('')

# show x tick labels in all subplots
for ax in g.axes.flatten():
    ax.tick_params(labelbottom=True)

# manually set linestyle for control to solid on the left column
for ax in g.axes[:, 0]:
    ax.lines[0].set_linestyle('-')

# manually set linestyle for explanation to solid on the right column
for ax in g.axes[:, 2]:
    ax.lines[8].set_linestyle('-')

# manually set linestyle for prediction to solid on the middle column
for ax in g.axes[:, 1]:
    ax.lines[4].set_linestyle('-')

# add line at y=0
for ax in g.axes.flatten():
    ax.axhline(y=0, color='gray', linestyle='--')

# Custom column names
g.axes[0, 0].set_title('Trained on control', fontweight='bold')
g.axes[0, 1].set_title('Trained on prediction', fontweight='bold')
g.axes[0, 2].set_title('Trained on explanation', fontweight='bold')

# increase space between rows
g.fig.subplots_adjust(hspace=0.3)

# Show the plot
plt.show()

# Save the plot
g.savefig(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../outputs/fig-exp4-participant-betas.png'), dpi=300, bbox_inches='tight')
